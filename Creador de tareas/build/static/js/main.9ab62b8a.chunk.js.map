{"version":3,"sources":["components/Header.component.js","components/Noticia.component.js","components/ListaNoticias.component.js","components/formulario.component.js","App.js","serviceWorker.js","index.js"],"names":["Header","titulo","className","href","Noticia","noticia","urlToImage","url","title","author","description","source","image","src","alt","name","target","rel","ListaNoticias","noticias","map","key","Formulario","state","categoria","cambiarCategoria","e","setState","value","props","consultarNoticias","onChange","this","selected","Component","App","a","fetch","respuesta","json","articles","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"yQAQeA,EAPA,SAAC,GAAD,IAAEC,EAAF,EAAEA,OAAF,OACf,yBAAKC,UAAU,2DACb,uBAAGA,UAAU,eAAeC,KAAK,KAAI,uBAAGD,UAAU,qBAAlD,KAA4ED,KC8B/DG,EAhCC,SAAC,GAAe,IAAdC,EAAa,EAAbA,QAGPC,EAAuDD,EAAvDC,WAAYC,EAA2CF,EAA3CE,IAAKC,EAAsCH,EAAtCG,MAAOC,EAA+BJ,EAA/BI,OAAQC,EAAuBL,EAAvBK,YAAaC,EAAUN,EAAVM,OAE9CC,EAASN,EACf,6BACA,yBAAKJ,UAAU,eAAeW,IAAKP,EAAYQ,IAAKN,IACpD,0BAAMN,UAAU,cAAcS,EAAOI,OAKnC,KAIF,OAAS,yBAAKb,UAAU,yBACzB,yBAAKA,UAAU,aACf,yBAAKA,UAAU,gBAAgBU,GAC/B,yBAAKV,UAAU,eAAeO,GAE1B,yBAAKP,UAAU,aACX,wBAAIA,UAAU,cAAeM,GAC7B,uBAAGN,UAAU,aAAaQ,GAC1B,uBAAGM,OAAO,SAASC,IAAI,sBAAsBd,KAAMI,EAAKL,UAAU,6BAAlE,kBCFIgB,EAlBO,SAAC,GAAD,IAAEC,EAAF,EAAEA,SAAF,OAGlB,yBAAKjB,UAAU,OACdiB,EAASC,KAAI,SAAAf,GAAO,OACzB,kBAAC,EAAD,CACIgB,IAAKhB,EAAQE,IACbF,QAASA,SCiCEiB,E,2MA5CXC,MAAQ,CACJC,UAAY,W,EAEfC,iBAAmB,SAAAC,GACf,EAAKC,SAAS,CACVH,UAAaE,EAAEV,OAAOY,QACvB,WAGH,EAAKC,MAAMC,kBAAkB,EAAKP,MAAMC,e,wEASzC,OACI,yBAAKtB,UAAU,OACX,yBAAKA,UAAU,OACX,0BAAMA,UAAU,QACZ,wBAAIA,UAAU,kBAAd,eACA,yBAAKA,UAAU,4BACf,4BACA6B,SAAUC,KAAKP,iBACdvB,UAAU,iBACP,4BAAQ+B,UAAQ,EAACL,MAAM,WAAvB,eACA,4BAAQA,MAAM,YAAd,YACA,4BAAQA,MAAM,iBAAd,mBACA,4BAAQA,MAAM,UAAd,SACA,4BAAQA,MAAM,UAAd,YACA,4BAAQA,MAAM,cAAd,uB,GAjCHM,aCsDVC,E,2MA5CbZ,MAAQ,CAENJ,SAAW,I,EAQfW,kB,sBAAoB,8CAAAM,EAAA,6DAAOZ,EAAP,+BAAmB,UAC/BjB,EADY,mEACsDiB,EADtD,qDAGIa,MAAM9B,GAHV,cAGd+B,EAHc,gBAIGA,EAAUC,OAJb,OAIdpB,EAJc,OAOpB,EAAKQ,SAAS,CAEZR,SAAWA,EAASqB,WATF,2C,mFALlBR,KAAKF,sB,+BAmBL,OAEC,kBAAC,WAAD,KAEE,kBAAC,EAAD,CACA7B,OAAO,YAEP,yBAAKC,UAAU,kBACnB,kBAAC,EAAD,CACA4B,kBAAmBE,KAAKF,oBAEpB,kBAAC,EAAD,CACAX,SAAUa,KAAKT,MAAMJ,iB,GArCRe,aCEEO,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.9ab62b8a.chunk.js","sourcesContent":["import React from 'react';\r\nconst Header = ({titulo}) =>(\r\n<nav className=\"navbar navbar-expand-lg navbar-light bg-light fixed-top\">\r\n  <a className=\"navbar-brand\" href=\"#\"><i className=\"fas fa-newspaper\"></i>  {titulo}</a>\r\n\r\n</nav>\r\n\r\n)\r\nexport default Header;","import React from 'react';\r\nconst Noticia = ({noticia}) => {\r\n\r\n    //extraer los datos de la api\r\n    const {urlToImage, url, title, author, description, source} = noticia;\r\n    //condicionalmente cargar una img\r\n    const image = (urlToImage ) ? \r\n    <div>\r\n    <img className=\"card-img-top\" src={urlToImage} alt={title} />\r\n    <span className=\"card-title\">{source.name}</span>\r\n    </div>\r\n\r\n\r\n    \r\n    : null;\r\n\r\n\r\n\r\n    return ( <div className=\"col-md-6 col-lg-6 col\">\r\n   <div className=\"card my-3\">\r\n   <div className=\"card-img-top\">{image}</div>\r\n   <div className=\"card-header\">{author}</div>\r\n \r\n       <div className=\"card-body\" >\r\n           <h5 className=\"card-title\" >{title}</h5>\r\n           <p className=\"card-text\">{description}</p>\r\n           <a target=\"_blank\" rel=\"noopener noreferrer\" href={url} className=\"btn btn-block btn-warning\">Ver fuente</a>\r\n       </div>\r\n   </div>\r\n            </div> \r\n  );\r\n}\r\n \r\nexport default Noticia;","import React from 'react';\r\nimport Noticia from './Noticia.component';\r\n\r\n\r\n\r\n\r\nconst ListaNoticias = ({noticias}) => (\r\n\r\n\r\n    <div className=\"row\" >\r\n    {noticias.map(noticia =>(\r\n<Noticia\r\n    key={noticia.url}\r\n    noticia={noticia}\r\n/>\r\n    ))}\r\n\r\n    </div>\r\n\r\n)\r\n\r\n      \r\n\r\n \r\nexport default ListaNoticias;","import React, { Component } from 'react';\r\nclass Formulario extends Component {\r\n    state = { \r\n        categoria : \"general\"\r\n     }\r\n     cambiarCategoria = e =>{\r\n         this.setState({\r\n             categoria :  e.target.value\r\n         }, () =>{\r\n             //mediqante un callback lo llamos al instante para que se ejecute el codigo al mismo tiempo\r\n         //pasarlo al component principal\r\n         this.props.consultarNoticias(this.state.categoria)\r\n         })\r\n\r\n\r\n     }\r\n\r\n\r\n\r\n    render() { \r\n        return ( \r\n            <div className=\"row\" >\r\n                <div className=\"col\" >\r\n                    <form className=\"my-2\">\r\n                        <h2 className=\"text-left my-2\">Que Buscas?</h2>\r\n                        <div className=\"text-center col col-sm-8\">\r\n                        <select\r\n                        onChange={this.cambiarCategoria}\r\n                         className=\"custom-select\" >\r\n                            <option selected value=\"general\">--General--</option>\r\n                            <option value=\"business\">Negocios</option>\r\n                            <option value=\"entertainment\">Entretenimiento</option>\r\n                            <option value=\"health\">Salud</option>\r\n                            <option value=\"sports\">Deportes</option>\r\n                            <option value=\"technology\">Tecnologia</option>\r\n\r\n                        </select>\r\n                        \r\n                         </div>\r\n                    </form>\r\n                </div>\r\n            </div>\r\n         );\r\n    }\r\n}\r\n \r\nexport default Formulario;","import React, {Component, Fragment} from 'react';\nimport Header from './components/Header.component';\nimport ListaNoticias from './components/ListaNoticias.component';\nimport Formulario from './components/formulario.component';\n\n\n\n\n\n\nclass App extends Component{\n  state = {\n    //Iniciamos noticas como un arreglo vacio\n    noticias : []\n  }\n componentDidMount(){\n  this.consultarNoticias();\n\n}\n\n//Para que no se vea cargado el metodo de ciclo de vida me creo un propio metodo\nconsultarNoticias = async (categoria = 'general') =>{\n  const url = `https://newsapi.org/v2/top-headlines?country=co&category=${categoria}&apiKey=bc1f7b8f0dd545e4a3ceeed9f0fa6b83`\n\nconst respuesta = await fetch(url);\nconst noticias = await respuesta.json()\n\n\nthis.setState({\n\n  noticias : noticias.articles\n})\n}\n\nrender(){\n  return(\n\n   <Fragment>\n\n     <Header\n     titulo=\"NotiApp\" />\n   \n     <div className=\"container card\" >\n <Formulario\n consultarNoticias={this.consultarNoticias}\n  />\n     <ListaNoticias\n     noticias={this.state.noticias} />\n\n     </div>\n   </Fragment>\n  )\n}\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}